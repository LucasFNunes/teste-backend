openapi: 3.0.0
info:
  title: URL Shortener API
  description: API para gerenciamento de URLs encurtadas.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Servidor local

paths:
  /authenticate:
    post:
      summary: Autenticação de Usuário
      description: Autentica um usuário e retorna um token JWT.
      tags:
        - Autenticação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        200:
          description: Autenticado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                  token:
                    type: string
        400:
          description: Credenciais inválidas.
        500:
          description: Erro no servidor.

  /authenticate/email:
    post:
      summary: Autenticar o e-mail de um usuário.
      description: Esse endpoint autentica o e-mail de um usuário fornecendo um `userId` e um código de autenticação.
      tags:
        - Autenticação
      parameters:
        - name: userId
          in: body
          description: O ID do usuário que está realizando a autenticação.
          required: true
          schema:
            type: string
            example: "123456789"
        - name: code
          in: body
          description: O código de autenticação enviado para o e-mail do usuário.
          required: true
          schema:
            type: string
            example: "xyz123"
      responses:
        200:
          description: Email autenticado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email autenticado com sucesso!"
        400:
          description: Erro de autenticação (usuário não encontrado ou não logado).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Usuário com esse email não encontrado."
        401:
          description: Usuário não está logado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "É necessário estar logado para autenticar um email."

  /urlshortener:
    post:
      summary: Criar URL Encurtada
      description: Cria uma nova URL encurtada para o usuário.
      tags:
        - URL Shortener
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  example: "https://example.com"

      responses:
        201:
          description: URL encurtada criada com sucesso.
          content:
            application/json:
              schema:
                type: string
                example: "http://localhost:3000/urlshortener/abc123"
        400:
          description: Erro de validação.
        500:
          description: Erro no servidor.

  /urlshortener/findAll/url:
    get:
      summary: Listar URLs
      description: Retorna todas as URLs encurtadas de um usuário.
      tags:
        - URL Shortener
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Lista de URLs retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    userId:
                      type: string
                    url:
                      type: string
                    urlShortened:
                      type: string
                    clicks:
                      type: integer
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
        400:
          description: Parâmetros inválidos.
        500:
          description: Erro no servidor.

  /urlshortener/update/{id}:
    put:
      summary: Atualizar URL
      description: Atualiza uma URL encurtada de um usuário.
      tags:
        - URL Shortener
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  example: "https://new-url.com"
      responses:
        200:
          description: URL atualizada com sucesso.
          content:
            application/json:
              schema:
                type: string
                example: "Url atualizada com sucesso!"
        404:
          description: Item não encontrado.
        500:
          description: Erro no servidor.

  /urlshortener/delete/{id}:
    delete:
      summary: Deletar uma URL
      description: >
        Deleta logicamente uma URL vinculada ao usuário autenticado, marcando
        o campo `isTrashed` como `true`.
      tags:
        - URL Shortener
      parameters:
        - name: id
          in: path
          required: true
          description: ID da URL que será deletada.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: Token de autenticação do usuário.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  example: "https://delete-url.com"
      responses:
        200:
          description: Registro deletado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registro deletado com sucesso."
        404:
          description: Item não encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Item não encontrado"
        401:
          description: É necessário estar autenticado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "É necessário estar logado para deletar uma URL."
        500:
          description: Erro no servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Erro ao deletar item."

  /users/create:
    post:
      summary: Criar um novo usuário
      description: >
        Cria um novo usuário na plataforma e envia um e-mail para autenticação.
        Os campos `name`, `email` e `password` são obrigatórios.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  description: Nome do usuário.
                  example: "João Silva"
                email:
                  type: string
                  description: E-mail do usuário.
                  example: "joao.silva@example.com"
                password:
                  type: string
                  description: Senha do usuário.
                  example: "senha123"
      responses:
        201:
          description: Usuário criado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Conta criada com sucesso!"
        400:
          description: Erro de validação nos dados enviados.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Todos os campos são obrigatórios."
        409:
          description: E-mail já cadastrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email já cadastrado."
        500:
          description: Erro interno do servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Erro ao criar o usuário."
